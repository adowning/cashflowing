generator client {
  provider = "prisma-client-js"
  output   = "./client" // Adjust if using a different output, e.g. for serverless
}

generator typescriptInterfaces {
  provider          = "ts-node ./node_modules/.bin/prisma-generator-typescript-interfaces"
  output            = "../../types/src/prisma/interfaces.ts" // Output to shared package
  client            = "../../../../node_modules/.prisma/client"
  optionalRelations = "false"
  prettier          = "false"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Achievement {
  id              String            @id @default(cuid())
  name            String
  description     String
  targetXp        Int
  reward          Int?
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?
  userachievement Userachievement[]

  @@map("achievement")
}

model User {
  id                                 String            @id @default(cuid())
  name                               String?
  email                              String            @unique
  emailVerified                      Boolean?
  isOnline                           Boolean?
  image                              String?
  createdAt                          DateTime          @default(now())
  updatedAt                          DateTime?         @updatedAt
  twoFactorEnabled                   Boolean?
  role                               String?
  banned                             Boolean?
  banReason                          String?
  banExpires                         DateTime?
  username                           String            @unique
  displayUsername                    String            @default("")
  passwordHash                       String?
  totalXp                            Int               @default(0)
  balance                            Int               @default(0) // Consider Decimal for monetary values
  isVerified                         Boolean           @default(false)
  active                             Boolean           @default(false)
  lastLogin                          DateTime?
  verificationToken                  String?
  avatar                             String?
  activeProfileId                    String?           @unique
  gender                             Gender?
  status                             UserStatus?
  cashtag                            String?
  phpId                              Int?
  accessToken                        String?
  vipInfoId                          String? // Should match VipInfo's id type if it's a relation
  lastDailySpin                      DateTime?
  operator                           Operator[]
  activeProfile                      Profile[]         @relation("profile_userIdTouser")
  RainBet                            RainBet[]
  RainHistory                        RainHistory[]
  RainTip                            RainTip[]
  RainWinner                         RainWinner[]
  sessions                           PlatformSession[]
  accounts                           Account[]
  chatmessage                        Chatmessage[]
  friendshipFriendshipFriendidtouser Friendship[]      @relation("friendship_friendIdTouser")
  friendshipFriendshipUseridtouser   Friendship[]      @relation("friendship_userIdTouser")
  invitations                        Invitation[]
  members                            Member[]
  notification                       Notification[]
  tournamententry                    Tournamententry[]
  twofactors                         TwoFactor[]
  userachievement                    Userachievement[]
  vipInfo                            VipInfo?          @relation // Assuming VipInfo id is String

  @@index([createdAt], map: "user_created_at_idx")
  @@index([username, email])
  @@map("user")
}

model Account {
  id        String @id @default(cuid())
  accountId String

  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime? @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model PlatformSession {
  id           String    @id @default(cuid())
  userId       String
  activeGameId String?
  ipAddress    String?
  userAgent    String?
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  refreshToken String?   @unique
  active       Boolean   @default(false)
  token        String    @unique
  updatedAt    DateTime? @updatedAt
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([refreshToken])
  @@index([userId])
  @@map("platform_sessions")
}

model Operator {
  id               String       @id @default(cuid())
  name             String
  slug             String       @unique
  logo             String?
  description      String?
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime?    @updatedAt
  acceptedPayments String[]     @default(["CASHAPP"])
  ownerId          String
  balance          Int          @default(0)
  owner            User         @relation(fields: [ownerId], references: [id])
  profiles         Profile[]
  games            Game[]
  products         Product[]
  tournaments      Tournament[]
  VipInfo          VipInfo[]

  @@index([slug])
  @@map("operators")
}

model Message {
  id        String    @id @default(cuid())
  content   String?   @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  authorId  String? // Assuming a relation to User, add if needed: user User @relation(fields: [authorId], references: [id])

  @@map("messages")
}

model Profile {
  id                      String            @id @default(cuid())
  balance                 Int               @default(0) // Consider Decimal
  xpEarned                Int               @default(0)
  isActive                Boolean           @default(false)
  lastPlayed              DateTime?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime?         @updatedAt
  phpId                   Int?              @unique
  userId                  String
  currency                String            @default("USD")
  shopId                  String
  operator                Operator          @relation(fields: [shopId], references: [id], onDelete: Cascade)
  userProfileUseridtouser User              @relation("profile_userIdTouser", fields: [userId], references: [id], onDelete: Cascade)
  gamesession             Gamesession[]
  tournamententry         Tournamententry[]
  transactions            Transaction[]

  @@unique([userId, shopId])
  @@index([shopId, isActive], map: "operator_active_profile_idx")
  @@index([userId, isActive], map: "user_active_profile_idx")
  @@map("profiles")
}

model Game {
  id                           String           @id @default(cuid())
  name                         String
  title                        String
  temperature                  String?
  developer                    String?
  vipLevel                     Int?             @default(0)
  isActive                     Boolean?         @default(false)
  device                       Int?             @default(0) // 0: All, 1: Desktop, 2: Mobile
  featured                     Boolean?         @default(false)
  gamebank                     String?          @default("slots")
  bet                          Float?           @default(0)
  denomination                 Float?           @default(0)
  categoryTemp                 Float?           @default(0)
  originalId                   Int?             @default(0)
  bids                         Int?             @default(0)
  statIn                       Float?           @default(0)
  statOut                      Float?           @default(0)
  currentRtp                   Float?           @default(0)
  rtpStatIn                    Float?           @default(0)
  rtpStatOut                   Float?           @default(0)
  standardRtp                  Float?           @default(0)
  popularity                   Float?           @default(0)
  chanceFirepot1               Float?
  chanceFirepot2               Float?
  chanceFirepot3               Float?
  fireCount1                   Float?
  fireCount2                   Float?
  fireCount3                   Float?
  linesPercentConfigSpin       String?
  linesPercentConfigSpinBonus  String?
  linesPercentConfigBonus      String?
  linesPercentConfigBonusBonus String?
  rezerv                       Float?           @default(0)
  cask                         Float?           @default(0)
  advanced                     String?          @default("")
  scaleMode                    String           @default("")
  slotViewState                String           @default("")
  view                         Int?             @default(0)
  categoryId                   String?
  operatorId                   String?
  providerId                   String?
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime?        @updatedAt
  jackpotGroupId               String?
  active                       Boolean          @default(true)
  password                     String?
  category                     GameCategory     @default(SLOTS)
  operator                     Operator?        @relation(fields: [operatorId], references: [id])
  gamesession                  Gamesession[]
  tournamentgame               Tournamentgame[]

  @@map("games")
}

model Operatorgame {
  id           String    @id @default(cuid())
  name         String
  slug         String    @unique
  description  String?
  thumbnail    String?
  minBet       Int?
  maxBet       Int?
  xpMultiplier Float     @default(1.0)
  isActive     Boolean   @default(true)
  isPromoted   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  operatorId   String // Assuming relation to Operator, add if needed: operator Operator @relation(fields: [operatorId], references: [id])

  @@index([slug], map: "game_slug_idx")
  @@map("operatorgames")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verifications")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String?      @unique
  logo        String?
  createdAt   DateTime     @default(now())
  metadata    String?
  invitations Invitation[]
  members     Member[]

  @@map("organizations")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("members")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitations")
}

model TwoFactor {
  id          String @id @default(cuid())
  secret      String
  backupCodes String
  userId      String @unique // Assuming one-to-one with User
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactors")
}

model Chatmessage {
  id        String      @id @default(cuid())
  content   String
  channel   ChatChannel
  metadata  Json?
  createdAt DateTime    @default(now())
  userId    String
  roomId    String?
  chatroom  Chatroom?   @relation(fields: [roomId], references: [id])
  user      User        @relation(fields: [userId], references: [id])

  @@index([channel], map: "chat_channel_idx")
  @@index([roomId], map: "chat_room_idx")
  @@map("chatmessages")
}

model Chatroom {
  id            String        @id @default(cuid())
  name          String
  isGameRoom    Boolean       @default(false)
  createdAt     DateTime      @default(now())
  gameSessionId String?       @unique // Assuming one chatroom per game session
  chatmessage   Chatmessage[]
  gamesession   Gamesession?  @relation(fields: [gameSessionId], references: [id])

  @@map("chatrooms")
}

model Friendship {
  id                           String           @id @default(cuid())
  status                       FriendshipStatus @default(PENDING)
  createdAt                    DateTime         @default(now())
  updatedAt                    DateTime?        @updatedAt
  userId                       String
  friendId                     String
  userFriendshipFriendidtouser User             @relation("friendship_friendIdTouser", fields: [friendId], references: [id])
  userFriendshipUseridtouser   User             @relation("friendship_userIdTouser", fields: [userId], references: [id])

  @@unique([userId, friendId])
  @@map("friendships")
}

model Gamesession {
  id           String        @id @default(cuid())
  startTime    DateTime      @default(now())
  endTime      DateTime?
  betAmount    Int?
  winAmount    Int?
  xpEarned     Int           @default(0)
  metadata     Json?
  gameId       String
  tournamentId String?
  active       Boolean       @default(false)
  profileId    String
  chatroom     Chatroom[]
  game         Game          @relation(fields: [gameId], references: [id])
  profile      Profile       @relation(fields: [profileId], references: [id])
  tournament   Tournament?   @relation(fields: [tournamentId], references: [id])
  Transaction  Transaction[]
  VipInfo      VipInfo?      @relation(fields: [vipInfoId], references: [id])
  vipInfoId    String?

  @@index([gameId], map: "session_game_idx")
  @@index([profileId], map: "session_profile_idx")
  @@map("gamesessions")
}

model Product {
  id                       String        @id @default(cuid())
  title                    String        @default("default")
  description              String        @default("default")
  url                      String        @default("default")
  type                     String        @default("bundle")
  bonusCode                String?       @default("")
  bonusTotalInCredits      Int           @default(0)
  priceInCents             Int           @default(0)
  amountToReceiveInCredits Int           @default(0)
  bestValue                Int           @default(0)
  discountInCents          Int           @default(0)
  bonusSpins               Int           @default(0)
  isPromo                  Boolean?      @default(false)
  totalDiscountInCents     Int           @default(0)
  shopId                   String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime?     @updatedAt
  operator                 Operator?     @relation(fields: [shopId], references: [id])
  transactions             Transaction[] @relation("ProductToTransaction")

  @@map("products")
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  readAt    DateTime?
  metadata  Json?
  createdAt DateTime         @default(now())
  userId    String
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId, isRead], map: "notification_user_status_idx")
  @@map("notifications")
}

model Tournament {
  id              String            @id @default(cuid())
  name            String
  description     String?
  startTime       DateTime
  endTime         DateTime
  entryFee        Int?
  prizePool       Int               @default(0)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime?         @updatedAt
  operatorId      String
  leaderboard     Json?
  gamesession     Gamesession[]
  operator        Operator          @relation(fields: [operatorId], references: [id])
  tournamententry Tournamententry[]
  tournamentgame  Tournamentgame[]

  @@index([operatorId], map: "tournament_operator_idx")
  @@map("tournaments")
}

model Tournamententry {
  id           String     @id @default(cuid())
  score        Int        @default(0)
  wagered      Int        @default(0)
  won          Int        @default(0)
  joinedAt     DateTime   @default(now())
  userId       String
  tournamentId String
  profileId    String
  profile      Profile    @relation(fields: [profileId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  user         User       @relation(fields: [userId], references: [id])

  @@unique([userId, tournamentId])
  @@map("tournamententries")
}

model Tournamentgame {
  id           String     @id @default(cuid())
  multiplier   Float      @default(1.0)
  tournamentId String
  gameId       String
  game         Game       @relation(fields: [gameId], references: [id])
  tournament   Tournament @relation(fields: [tournamentId], references: [id])

  @@unique([tournamentId, gameId])
  @@map("tournamentgames")
}

model Transaction {
  id             String            @id @default(cuid())
  type           TransactionType   @default(DEPOSIT)
  amount         Int               @default(0) // Consider Decimal
  amountCredits  Int               @default(0)
  buyerCashtag   String?
  buyerUserId    String?
  username       String?
  cashiername    String?
  cashierAvatar  String?
  cashierId      String?
  reference      String?
  status         TransactionStatus @default(PENDING)
  metadata       Json?
  isRealMoney    Boolean           @default(false)
  paymentMethod  String?
  paymentDetails Json?
  createdAt      DateTime          @default(now())
  processedAt    DateTime?
  gameSessionId  String?
  profileId      String?
  cashtag        String?
  gamesession    Gamesession?      @relation(fields: [gameSessionId], references: [id])
  profile        Profile?          @relation(fields: [profileId], references: [id])
  product        Product?          @relation("ProductToTransaction", fields: [productid], references: [id])
  productid      String?
  vipInfo        VipInfo?          @relation(fields: [vipInfoId], references: [id])
  vipInfoId      String?

  @@index([profileId], map: "transaction_profile_idx")
  @@index([type])
  @@map("transactions")
}

model Userachievement {
  id            String      @id @default(cuid())
  progress      Int         @default(0)
  isUnlocked    Boolean     @default(false)
  unlockedAt    DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt
  userId        String
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@map("userachievements")
}

model RainBet {
  id            String      @id @default(cuid())
  rainHistoryId String
  userId        String
  betAmount     Int
  odds          Int
  outcome       String?
  settledAt     DateTime?
  RainHistory   RainHistory @relation(fields: [rainHistoryId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rainbets")
}

model RainHistory {
  id         String       @id @default(cuid())
  userId     String
  amount     Int
  rainType   String
  createdAt  DateTime     @default(now())
  RainBet    RainBet[]
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  RainTip    RainTip[]
  RainWinner RainWinner[]

  @@map("rainhistories")
}

model RainTip {
  id            String      @id @default(cuid())
  rainHistoryId String
  userId        String
  tipAmount     Int
  tippedAt      DateTime    @default(now())
  RainHistory   RainHistory @relation(fields: [rainHistoryId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("raintips")
}

model RainWinner {
  id            String      @id @default(cuid())
  rainHistoryId String
  userId        String
  wonAmount     Int
  wonAt         DateTime    @default(now())
  RainHistory   RainHistory @relation(fields: [rainHistoryId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rainwinners")
}

model VipInfo {
  id                           String        @id @default(cuid())
  level                        Int           @default(0)
  deposit_exp                  Int           @default(0)
  bet_exp                      Int           @default(0)
  rank_bet_exp                 Int           @default(0)
  rank_deposit_exp             Int           @default(0)
  rank_name                    String?
  icon                         String?
  exp_switch_type              Int?          @default(0)
  now_deposit_exp              String?
  level_deposit_exp            String?
  now_bet_exp                  String?
  level_bet_exp                String?
  telegram                     String?
  is_protection                Boolean       @default(false)
  protection_deposit_exp       String?
  protection_deposit_amount    String?
  protection_bet_exp           String?
  protection_bet_amount        String?
  protection_days              Int?          @default(0)
  protection_switch            Int?          @default(0)
  cycle_award_switch           Boolean       @default(false)
  level_award_switch           Boolean       @default(false)
  signin_award_switch          Boolean       @default(false)
  bet_award_switch             Boolean       @default(false)
  withdrawal_award_switch      Boolean       @default(false)
  unprotection_deposit_exp     String?
  unprotection_deposit_amount  String?
  unprotection_bet_exp         String?
  unprotection_bet_amount      String?
  unprotection_days            Int?          @default(0)
  unprotection_switch          Int?          @default(0)
  main_currency                String?
  can_receive_level_award      Boolean       @default(false)
  can_receive_rank_award       Boolean       @default(false)
  can_receive_day_award        Boolean       @default(false)
  can_receive_week_award       Boolean       @default(false)
  can_receive_month_award      Boolean       @default(false)
  can_receive_signin_award     Boolean       @default(false)
  can_receive_bet_award        Boolean       @default(false)
  can_receive_withdrawal_award Boolean       @default(false)
  userid                       String?       @unique()
  free_spin_times              Int?          @default(0)
  week_gift                    Int?          @default(0)
  month_gift                   Int?          @default(0)
  upgrade_gift                 Int?          @default(0)
  now_cash_back                Int?          @default(0)
  yesterday_cash_back          Int?          @default(0)
  history_cash_back            Int?          @default(0)
  gamesession                  Gamesession[]
  operator                     Operator?     @relation(fields: [operatorId], references: [id])
  transactions                 Transaction[]
  user                         User?         @relation(fields: [userid], references: [id])
  operatorId                   String?

  @@map("vip_infos")
}

model EventLog {
  id        BigInt    @id @default(autoincrement())
  tableName String    @map("table_name") @db.VarChar(255)
  rowId     String?   @map("row_id") @db.VarChar(255)
  operation String    @db.VarChar(10)
  payload   Json?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("event_logs")
}

enum ChatChannel {
  LOBBY
  GAME
  TOURNAMENT
  PRIVATE
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Gender {
  BOY
  GIRL
  ALIEN
  UNSURE
  ROBOT
  COMPLICATED
}

enum NotificationType {
  SYSTEM
  FRIEND_REQUEST
  ACHIEVEMENT
  BALANCE_UPDATE
  PROMOTIONAL
  TOURNAMENT
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
  REJECTED
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  BET
  WIN
  BONUS
  DONATION
  ADJUSTMENT
  TOURNAMENT_BUYIN
  TOURNAMENT_PRIZE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  ONLINE
  OFFLINE
}

enum GameCategory {
  TABLE
  FISH
  POKER
  SLOTS
  OTHER
}
