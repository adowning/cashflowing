// generator client {
//   provider = "prisma-client-js"
//   output   = "./client" // Adjust if using a different output, e.g. for serverless
// }

// generator typescriptInterfaces {
//   provider          = "ts-node ./node_modules/.bin/prisma-generator-typescript-interfaces"
//   output            = "../../types/src/prisma/interfaces.ts" // Output to shared package
//   client            = "../../../../node_modules/.prisma/client"
//   optionalRelations = "false"
//   prettier          = "false"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// model achievement {
//   id              String            @id @default(cuid())
//   name            String
//   description     String
//   targetXp        Int
//   reward          Int?
//   isActive        Boolean           @default(true)
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime?
//   userachievement userachievement[]
// }

// model User {
//   id                                   String            @id @default(cuid())
//   name                                 String?
//   email                                String            @unique
//   emailVerified                        Boolean?
//   image                                String?
//   createdAt                            DateTime          @default(now())
//   updatedAt                            DateTime?         @updatedAt
//   twoFactorEnabled                     Boolean?
//   role                                 String?
//   banned                               Boolean?
//   banReason                            String?
//   banExpires                           DateTime?
//   username                             String            @unique
//   passwordHash                         String?
//   totalXp                              Int               @default(0)
//   balance                              Int               @default(0) // Consider Decimal for monetary values
//   isVerified                           Boolean           @default(false)
//   active                               Boolean           @default(false)
//   lastLogin                            DateTime?
//   verificationToken                    String?
//   avatar                               String?
//   activeProfileId                      String?           @unique
//   gender                               Gender?
//   status                               UserStatus?
//   cashtag                              String?
//   phpId                                Int?
//   accessToken                          String?
//   vipInfoId                            String? // Should match VipInfo's id type if it's a relation
//   lastDailySpin                        DateTime?
//   operator                             Operator[]
//   activeProfile                        Profile[]         @relation("profile_userIdTouser")
//   RainBet                              RainBet[]
//   RainHistory                          RainHistory[]
//   RainTip                              RainTip[]
//   RainWinner                           RainWinner[]
//   sessions                             Session[]
//   accounts                             Account[]
//   chatmessage                          chatmessage[]
//   friendship_friendship_friendIdTouser friendship[]      @relation("friendship_friendIdTouser")
//   friendship_friendship_userIdTouser   friendship[]      @relation("friendship_userIdTouser")
//   invitations                          Invitation[]
//   members                              Member[]
//   notification                         notification[]
//   tournamententry                      tournamententry[]
//   twofactors                           TwoFactor[]
//   userachievement                      userachievement[]
//   vipInfo                              VipInfo?          @relation // Assuming VipInfo id is String

//   @@index([createdAt], map: "user_created_at_idx")
//   @@index([username, email])
//   @@map("user")
// }

// model Session {
//   id           String    @id @default(cuid())
//   userId       String
//   activeGameId String?
//   ipAddress    String?
//   userAgent    String?
//   expiresAt    DateTime
//   createdAt    DateTime  @default(now())
//   refreshToken String?   @unique
//   active       Boolean   @default(false)
//   token        String    @unique
//   updatedAt    DateTime? @updatedAt
//   user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@index([refreshToken])
//   @@index([userId])
// }

// model Operator {
//   id               String       @id @default(cuid())
//   name             String
//   slug             String       @unique
//   logo             String?
//   description      String?
//   isActive         Boolean      @default(true)
//   createdAt        DateTime     @default(now())
//   updatedAt        DateTime?    @updatedAt
//   acceptedPayments String[]     @default(["CASHAPP"])
//   ownerId          String
//   balance          Int          @default(0)
//   owner            User         @relation(fields: [ownerId], references: [id])
//   profiles         Profile[]
//   games            Game[]
//   products         Product[]
//   tournaments      tournament[]
//   VipInfo          VipInfo[]

//   @@index([slug])
// }

// model Message {
//   id        String   @id @default(cuid())
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   authorId  String // Assuming a relation to User, add if needed: user User @relation(fields: [authorId], references: [id])
// }

// model Profile {
//   id                        String            @id @default(cuid())
//   balance                   Int               @default(0) // Consider Decimal
//   xpEarned                  Int               @default(0)
//   isActive                  Boolean           @default(false)
//   lastPlayed                DateTime?
//   createdAt                 DateTime          @default(now())
//   updatedAt                 DateTime?         @updatedAt
//   phpId                     Int?              @unique
//   userId                    String
//   currency                  String            @default("USD")
//   shopId                    String
//   operator                  Operator          @relation(fields: [shopId], references: [id], onDelete: Cascade)
//   user_profile_userIdTouser User              @relation("profile_userIdTouser", fields: [userId], references: [id], onDelete: Cascade)
//   gamesession               gamesession[]
//   tournamententry           tournamententry[]
//   transactions              Transaction[]

//   @@unique([userId, shopId])
//   @@index([shopId, isActive], map: "operator_active_profile_idx")
//   @@index([userId, isActive], map: "user_active_profile_idx")
// }

// model Game {
//   id                           String           @id @default(cuid())
//   name                         String
//   title                        String
//   temperature                  String?
//   developer                    String?
//   vipLevel                     Int?             @default(0)
//   isActive                     Boolean?         @default(false)
//   device                       Int?             @default(0) // 0: All, 1: Desktop, 2: Mobile
//   featured                     Boolean?         @default(false)
//   gamebank                     String?          @default("slots")
//   bet                          Float?           @default(0)
//   denomination                 Float?           @default(0)
//   categoryTemp                 Float?           @default(0)
//   originalId                   Int?             @default(0)
//   bids                         Int?             @default(0)
//   statIn                       Float?           @default(0)
//   statOut                      Float?           @default(0)
//   currentRtp                   Float?           @default(0)
//   rtpStatIn                    Float?           @default(0)
//   rtpStatOut                   Float?           @default(0)
//   standardRtp                  Float?           @default(0)
//   popularity                   Float?           @default(0)
//   chanceFirepot1               Float?
//   chanceFirepot2               Float?
//   chanceFirepot3               Float?
//   fireCount1                   Float?
//   fireCount2                   Float?
//   fireCount3                   Float?
//   linesPercentConfigSpin       String?
//   linesPercentConfigSpinBonus  String?
//   linesPercentConfigBonus      String?
//   linesPercentConfigBonusBonus String?
//   rezerv                       Float?           @default(0)
//   cask                         Float?           @default(0)
//   advanced                     String?          @default("")
//   scaleMode                    String           @default("")
//   slotViewState                String           @default("")
//   view                         Int?             @default(0)
//   categoryId                   String?
//   operatorId                   String?
//   providerId                   String?
//   createdAt                    DateTime         @default(now())
//   updatedAt                    DateTime         @updatedAt
//   jackpotGroupId               String?
//   active                       Boolean          @default(true)
//   password                     String?
//   category                     GameCategory     @default(SLOTS)
//   operator                     Operator?        @relation(fields: [operatorId], references: [id])
//   gamesession                  gamesession[]
//   tournamentgame               tournamentgame[]

//   @@map("games")
// }

// model Account {
//   id                    String    @id @default(cuid())
//   accountId             String
//   providerId            String
//   userId                String
//   accessToken           String?
//   refreshToken          String?
//   idToken               String?
//   accessTokenExpiresAt  DateTime?
//   refreshTokenExpiresAt DateTime?
//   scope                 String?
//   password              String?
//   createdAt             DateTime  @default(now())
//   updatedAt             DateTime? @updatedAt
//   user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("account")
// }

// model operatorgame {
//   id           String    @id @default(cuid())
//   name         String
//   slug         String    @unique
//   description  String?
//   thumbnail    String?
//   minBet       Int?
//   maxBet       Int?
//   xpMultiplier Float     @default(1.0)
//   isActive     Boolean   @default(true)
//   isPromoted   Boolean   @default(false)
//   createdAt    DateTime  @default(now())
//   updatedAt    DateTime? @updatedAt
//   operatorId   String // Assuming relation to Operator, add if needed: operator Operator @relation(fields: [operatorId], references: [id])

//   @@index([slug], map: "game_slug_idx")
// }

// model Verification {
//   id         String    @id @default(cuid())
//   identifier String
//   value      String
//   expiresAt  DateTime
//   createdAt  DateTime? @default(now())
//   updatedAt  DateTime? @updatedAt

//   @@map("verification")
// }

// model Organization {
//   id          String       @id @default(cuid())
//   name        String
//   slug        String?      @unique
//   logo        String?
//   createdAt   DateTime     @default(now())
//   metadata    String?
//   invitations Invitation[]
//   members     Member[]

//   @@map("organization")
// }

// model Member {
//   id             String       @id @default(cuid())
//   organizationId String
//   userId         String
//   role           String
//   createdAt      DateTime     @default(now())
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("member")
// }

// model Invitation {
//   id             String       @id @default(cuid())
//   organizationId String
//   email          String
//   role           String?
//   status         String
//   expiresAt      DateTime
//   inviterId      String
//   user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

//   @@map("invitation")
// }

// model TwoFactor {
//   id          String @id @default(cuid())
//   secret      String
//   backupCodes String
//   userId      String @unique // Assuming one-to-one with User
//   user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@map("twoFactor")
// }

// model chatmessage {
//   id        String      @id @default(cuid())
//   content   String
//   channel   ChatChannel
//   metadata  Json?
//   createdAt DateTime    @default(now())
//   userId    String
//   roomId    String?
//   chatroom  chatroom?   @relation(fields: [roomId], references: [id])
//   user      User        @relation(fields: [userId], references: [id])

//   @@index([channel], map: "chat_channel_idx")
//   @@index([roomId], map: "chat_room_idx")
// }

// model chatroom {
//   id            String        @id @default(cuid())
//   name          String
//   isGameRoom    Boolean       @default(false)
//   createdAt     DateTime      @default(now())
//   gameSessionId String?       @unique // Assuming one chatroom per game session
//   chatmessage   chatmessage[]
//   gamesession   gamesession?  @relation(fields: [gameSessionId], references: [id])
// }

// model friendship {
//   id                             String           @id @default(cuid())
//   status                         FriendshipStatus @default(PENDING)
//   createdAt                      DateTime         @default(now())
//   updatedAt                      DateTime?        @updatedAt
//   userId                         String
//   friendId                       String
//   user_friendship_friendIdTouser User             @relation("friendship_friendIdTouser", fields: [friendId], references: [id])
//   user_friendship_userIdTouser   User             @relation("friendship_userIdTouser", fields: [userId], references: [id])

//   @@unique([userId, friendId])
// }

// model gamesession {
//   id           String        @id @default(cuid())
//   startTime    DateTime      @default(now())
//   endTime      DateTime?
//   betAmount    Int?
//   winAmount    Int?
//   xpEarned     Int           @default(0)
//   metadata     Json?
//   gameId       String
//   tournamentId String?
//   active       Boolean       @default(false)
//   profileId    String
//   chatroom     chatroom[]
//   game         Game          @relation(fields: [gameId], references: [id])
//   profile      Profile       @relation(fields: [profileId], references: [id])
//   tournament   tournament?   @relation(fields: [tournamentId], references: [id])
//   Transaction  Transaction[]
//   VipInfo      VipInfo?      @relation(fields: [vipInfoId], references: [id])
//   vipInfoId    String?

//   @@index([gameId], map: "session_game_idx")
//   @@index([profileId], map: "session_profile_idx")
// }

// model Product {
//   id                       String        @id @default(cuid())
//   title                    String
//   description              String
//   url                      String
//   type                     String
//   bonusCode                String?       @default("")
//   bonusTotalInCredits      Int?          @default(0)
//   priceInCents             Int           @default(0)
//   amountToReceiveInCredits Int           @default(0)
//   bestValue                Int           @default(0)
//   discountInCents          Int           @default(0)
//   bonusSpins               Int?
//   isPromo                  Boolean?      @default(false)
//   totalDiscountInCents     Int
//   shopId                   String?
//   createdAt                DateTime      @default(now())
//   updatedAt                DateTime?     @updatedAt
//   operator                 Operator?     @relation(fields: [shopId], references: [id])
//   transactions             Transaction[] @relation("ProductToTransaction")

//   @@map("products")
// }

// model notification {
//   id        String           @id @default(cuid())
//   type      NotificationType
//   title     String
//   message   String
//   isRead    Boolean          @default(false)
//   readAt    DateTime?
//   metadata  Json?
//   createdAt DateTime         @default(now())
//   userId    String
//   user      User             @relation(fields: [userId], references: [id])

//   @@index([userId, isRead], map: "notification_user_status_idx")
// }

// model tournament {
//   id              String            @id @default(cuid())
//   name            String
//   description     String?
//   startTime       DateTime
//   endTime         DateTime
//   entryFee        Int?
//   prizePool       Int               @default(0)
//   isActive        Boolean           @default(true)
//   createdAt       DateTime          @default(now())
//   updatedAt       DateTime?         @updatedAt
//   operatorId      String
//   leaderboard     Json?
//   gamesession     gamesession[]
//   operator        Operator          @relation(fields: [operatorId], references: [id])
//   tournamententry tournamententry[]
//   tournamentgame  tournamentgame[]

//   @@index([operatorId], map: "tournament_operator_idx")
// }

// model tournamententry {
//   id           String     @id @default(cuid())
//   score        Int        @default(0)
//   wagered      Int        @default(0)
//   won          Int        @default(0)
//   joinedAt     DateTime   @default(now())
//   userId       String
//   tournamentId String
//   profileId    String
//   profile      Profile    @relation(fields: [profileId], references: [id])
//   tournament   tournament @relation(fields: [tournamentId], references: [id])
//   user         User       @relation(fields: [userId], references: [id])

//   @@unique([userId, tournamentId])
// }

// model tournamentgame {
//   id           String     @id @default(cuid())
//   multiplier   Float      @default(1.0)
//   tournamentId String
//   gameId       String
//   game         Game       @relation(fields: [gameId], references: [id])
//   tournament   tournament @relation(fields: [tournamentId], references: [id])

//   @@unique([tournamentId, gameId])
// }

// model Transaction {
//   id             String            @id @default(cuid())
//   type           TransactionType
//   amount         Int               @default(0) // Consider Decimal
//   amountCredits  Int               @default(0)
//   buyerCashtag   String?
//   buyerUserId    String?
//   username       String?
//   cashiername    String?
//   cashierAvatar  String?
//   cashierId      String?
//   reference      String?
//   status         TransactionStatus @default(PENDING)
//   metadata       Json?
//   isRealMoney    Boolean           @default(false)
//   paymentMethod  String?
//   paymentDetails Json?
//   createdAt      DateTime          @default(now())
//   processedAt    DateTime?
//   gameSessionId  String?
//   profileId      String
//   cashtag        String?
//   gamesession    gamesession?      @relation(fields: [gameSessionId], references: [id])
//   profile        Profile           @relation(fields: [profileId], references: [id])
//   product        Product?          @relation("ProductToTransaction", fields: [productid], references: [id])
//   productid      String?
//   vipInfo        VipInfo?          @relation(fields: [vipInfoId], references: [id])
//   vipInfoId      String?

//   @@index([profileId], map: "transaction_profile_idx")
//   @@index([type])
//   @@map("transactions")
// }

// model userachievement {
//   id            String      @id @default(cuid())
//   progress      Int         @default(0)
//   isUnlocked    Boolean     @default(false)
//   unlockedAt    DateTime?
//   createdAt     DateTime    @default(now())
//   updatedAt     DateTime?   @updatedAt
//   userId        String
//   achievementId String
//   achievement   achievement @relation(fields: [achievementId], references: [id])
//   user          User        @relation(fields: [userId], references: [id])

//   @@unique([userId, achievementId])
// }

// model RainBet {
//   id            String      @id @default(cuid())
//   rainHistoryId String
//   userId        String
//   betAmount     Int
//   odds          Int
//   outcome       String?
//   settledAt     DateTime?
//   RainHistory   RainHistory @relation(fields: [rainHistoryId], references: [id], onDelete: Cascade)
//   user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model RainHistory {
//   id         String       @id @default(cuid())
//   userId     String
//   amount     Int
//   rainType   String
//   createdAt  DateTime     @default(now())
//   RainBet    RainBet[]
//   user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   RainTip    RainTip[]
//   RainWinner RainWinner[]
// }

// model RainTip {
//   id            String      @id @default(cuid())
//   rainHistoryId String
//   userId        String
//   tipAmount     Int
//   tippedAt      DateTime    @default(now())
//   RainHistory   RainHistory @relation(fields: [rainHistoryId], references: [id], onDelete: Cascade)
//   user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model RainWinner {
//   id            String      @id @default(cuid())
//   rainHistoryId String
//   userId        String
//   wonAmount     Int
//   wonAt         DateTime    @default(now())
//   RainHistory   RainHistory @relation(fields: [rainHistoryId], references: [id], onDelete: Cascade)
//   user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VipInfo {
//   id                           String        @id @default(cuid())
//   level                        Int           @default(0)
//   deposit_exp                  Int           @default(0)
//   bet_exp                      Int           @default(0)
//   rank_bet_exp                 Int           @default(0)
//   rank_deposit_exp             Int           @default(0)
//   rank_name                    String?
//   icon                         String?
//   exp_switch_type              Int?          @default(0)
//   now_deposit_exp              String?
//   level_deposit_exp            String?
//   now_bet_exp                  String?
//   level_bet_exp                String?
//   telegram                     String?
//   is_protection                Boolean       @default(false)
//   protection_deposit_exp       String?
//   protection_deposit_amount    String?
//   protection_bet_exp           String?
//   protection_bet_amount        String?
//   protection_days              Int?          @default(0)
//   protection_switch            Int?          @default(0)
//   cycle_award_switch           Boolean       @default(false)
//   level_award_switch           Boolean       @default(false)
//   signin_award_switch          Boolean       @default(false)
//   bet_award_switch             Boolean       @default(false)
//   withdrawal_award_switch      Boolean       @default(false)
//   unprotection_deposit_exp     String?
//   unprotection_deposit_amount  String?
//   unprotection_bet_exp         String?
//   unprotection_bet_amount      String?
//   unprotection_days            Int?          @default(0)
//   unprotection_switch          Int?          @default(0)
//   main_currency                String?
//   can_receive_level_award      Boolean       @default(false)
//   can_receive_rank_award       Boolean       @default(false)
//   can_receive_day_award        Boolean       @default(false)
//   can_receive_week_award       Boolean       @default(false)
//   can_receive_month_award      Boolean       @default(false)
//   can_receive_signin_award     Boolean       @default(false)
//   can_receive_bet_award        Boolean       @default(false)
//   can_receive_withdrawal_award Boolean       @default(false)
//   userid                       String?       @unique()
//   free_spin_times              Int?          @default(0)
//   week_gift                    Int?          @default(0)
//   month_gift                   Int?          @default(0)
//   upgrade_gift                 Int?          @default(0)
//   now_cash_back                Int?          @default(0)
//   yesterday_cash_back          Int?          @default(0)
//   history_cash_back            Int?          @default(0)
//   gamesession                  gamesession[]
//   operator                     Operator?     @relation(fields: [operatorId], references: [id])
//   transactions                 Transaction[]
//   user                         User?         @relation(fields: [userid], references: [id])
//   operatorId                   String

//   @@map("vip_infos")
// }

// model event_log {
//   id         BigInt    @id @default(autoincrement())
//   table_name String    @db.VarChar(255)
//   row_id     String?   @db.VarChar(255)
//   operation  String    @db.VarChar(10)
//   payload    Json?
//   created_at DateTime? @default(now()) @db.Timestamptz(6)
// }

// enum ChatChannel {
//   LOBBY
//   GAME
//   TOURNAMENT
//   PRIVATE
// }

// enum FriendshipStatus {
//   PENDING
//   ACCEPTED
//   BLOCKED
// }

// enum Gender {
//   BOY
//   GIRL
//   ALIEN
//   UNSURE
//   ROBOT
//   COMPLICATED
// }

// enum NotificationType {
//   SYSTEM
//   FRIEND_REQUEST
//   ACHIEVEMENT
//   BALANCE_UPDATE
//   PROMOTIONAL
//   TOURNAMENT
// }

// enum TransactionStatus {
//   PENDING
//   COMPLETED
//   FAILED
//   CANCELLED
//   REFUNDED
//   EXPIRED
//   REJECTED
// }

// enum TransactionType {
//   DEPOSIT
//   WITHDRAWAL
//   BET
//   WIN
//   BONUS
//   DONATION
//   ADJUSTMENT
//   TOURNAMENT_BUYIN
//   TOURNAMENT_PRIZE
// }

// enum UserStatus {
//   ACTIVE
//   INACTIVE
//   ONLINE
//   OFFLINE
// }

// enum GameCategory {
//   TABLE
//   FISH
//   POKER
//   SLOTS
//   OTHER
// }
